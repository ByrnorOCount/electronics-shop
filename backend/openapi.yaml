# The file already provides clarity for the /products and /users/register endpoints. As you move on to building the cart, orders, and admin features, expanding this contract first will ensure your frontend and backend development stays perfectly in sync.
# Remember to include request and response schemas for all new endpoints you add.
# Be sure to both obey and update this contract as you build further features

openapi: 3.0.0
info:
  title: Electronics Shop API
  description: API for an online electronics shop.
  version: 1.0.1
servers:
  - url: http://localhost:3001/api
    description: Development server

tags:
  - name: Products
    description: Product catalog operations
  - name: Users
    description: User authentication and management
  - name: Cart
    description: Shopping cart operations
  - name: Wishlist
    description: User wishlist operations
  - name: Orders
    description: Order management and history
  - name: Support
    description: Customer support tickets and FAQs
  - name: Staff
    description: Operations for staff members
  - name: Admin
    description: (Admin Only) System-wide user management.

paths:
  /products:
    get:
      summary: Get a list of products
      description: Retrieves a paginated list of products. Can be filtered by name, category, and price.
      tags:
        - Products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter products by name.
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category name.
        - in: query
          name: brand
          schema:
            type: string
          description: Filter by brand name.
        - in: query
          name: featured
          schema:
            type: boolean
          description: Filter for featured products.
      responses:
        '200':
          description: A list of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Get a single product by ID
      description: Retrieves detailed information for a specific product.
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the product to retrieve.
      responses:
        '200':
          description: Product details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.

  /users/register:
    post:
      summary: Register a new user
      description: Creates a new user account. Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character. An email will be sent to the user to verify their address before they can log in.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Registration successful. A verification email has been sent.
        '400':
          description: Invalid input (e.g., email already exists, weak password).

  /users/login:
    post:
      summary: Log in a user
      description: Authenticates a user and returns a JWT.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials.

  /users/verify-email/{token}:
    get:
      summary: Verify a user's email address
      description: Verifies a user's email using the token sent during registration.
      tags:
        - Users
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The email verification token.
      responses:
        '200':
          description: Email verified successfully. The user can now log in.
        '400':
          description: Token is invalid or has expired.

  /users/forgot-password:
    post:
      summary: Request a password reset
      description: Sends a password reset link to the user's email if the account exists.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: A generic success message is always returned to prevent email enumeration.

  /users/reset-password/{token}:
    post:
      summary: Reset password with a token
      description: Sets a new password for a user using a valid reset token.
      tags:
        - Users
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The password reset token from the email link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password has been successfully reset.
        '400':
          description: Token is invalid or expired, or password not provided.

  /users/me/notifications:
    get:
      summary: Get user's notifications
      description: Retrieves a list of all notifications for the logged-in user.
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of the user's notifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /cart:
    get:
      summary: Get the user's shopping cart
      description: Retrieves all items currently in the logged-in user's shopping cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The user's cart items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized.

    post:
      summary: Add an item to the cart
      description: Adds a product to the user's cart. If the item already exists, its quantity is updated.
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Item updated in cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '201':
          description: Item added to cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized.

  /cart/items/{itemId}:
    put:
      summary: Update item quantity in cart
      description: Updates the quantity of a specific item in the cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: The ID of the cart item to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Quantity updated successfully.
        '404':
          description: Cart item not found.

    delete:
      summary: Remove an item from the cart
      description: Deletes a specific item from the user's shopping cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: The ID of the cart item to delete.
      responses:
        '204':
          description: Item successfully removed from cart. No content returned.
        '404':
          description: Cart item not found or does not belong to the user.

  /wishlist:
    get:
      summary: Get the user's wishlist
      description: Retrieves all products currently in the logged-in user's wishlist.
      tags:
        - Wishlist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of products in the user's wishlist.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized.

    post:
      summary: Add a product to the wishlist
      description: Adds a product to the user's wishlist.
      tags:
        - Wishlist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToWishlistRequest'
      responses:
        '201':
          description: Product added to wishlist.
        '400':
          description: Product already in wishlist.
        '401':
          description: Unauthorized.

  /wishlist/{productId}:
    delete:
      summary: Remove a product from the wishlist
      description: Deletes a product from the user's wishlist.
      tags:
        - Wishlist
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: The ID of the product to remove from the wishlist.
      responses:
        '204':
          description: Product successfully removed from wishlist.

  /orders:
    get:
      summary: Get user's order history
      description: Retrieves a list of all past orders for the logged-in user.
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of the user's orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized.

    post:
      summary: Create a new order (Checkout)
      description: Creates a new **Cash on Delivery (COD)** order from the user's current cart after verifying a One-Time Password (OTP). This action will clear the cart. For online payments, use the `/orders/create-payment-session` endpoint first.
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request (e.g., empty cart).

  /orders/generate-otp:
    post:
      summary: Generate OTP for checkout
      description: Generates a One-Time Password (OTP) and sends it to the user's email for checkout verification. The OTP is valid for 10 minutes.
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OTP sent successfully.
        '500':
          description: Server error while generating OTP.

  /orders/create-payment-session:
    post:
      summary: Create a payment session for online payments
      description: Initiates a payment session with an online provider like Stripe or VNPay. Returns a URL for the user to complete the payment. An order is created via webhook upon successful payment.
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentSessionRequest'
      responses:
        '200':
          description: Payment session created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
        '400':
          description: Bad request (e.g., empty cart, invalid payment method).

  /support:
    get:
      summary: Get user's support tickets
      description: Retrieves a list of all support tickets submitted by the logged-in user.
      tags:
        - Support
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of the user's support tickets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicket'
        '401':
          description: Unauthorized.

    post:
      summary: Submit a new support ticket
      description: Creates a new support ticket for the logged-in user.
      tags:
        - Support
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSupportTicketRequest'
      responses:
        '201':
          description: Support ticket created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'

  /support/{ticketId}:
    get:
      summary: Get a single support ticket
      description: Retrieves the details of a specific support ticket, if it belongs to the user.
      tags:
        - Support
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: integer
          description: The ID of the support ticket to retrieve.
      responses:
        '200':
          description: The support ticket details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'
        '404':
          description: Ticket not found or does not belong to the user.

  /faq:
    get:
      summary: Get Frequently Asked Questions
      description: Retrieves a list of common questions and answers.
      tags:
        - Support
      responses:
        '200':
          description: A list of FAQs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FAQItem'

  /staff/products:
    post:
      summary: Create a new product
      description: (Staff Only) Adds a new product to the catalog.
      tags:
        - Staff
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product' # Re-use the product schema
      responses:
        '201':
          description: Product created successfully.

    get:
      summary: Get all products
      description: (Staff Only) Retrieves a complete list of all products in the catalog.
      tags:
        - Staff
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /staff/products/{id}:
    put:
      summary: Update a product
      description: (Staff Only) Updates details for an existing product.
      tags:
        - Staff
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully.

    delete:
      summary: Delete a product
      description: (Staff Only) Deletes a product from the catalog.
      tags:
        - Staff
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully.

  /staff/orders:
    get:
      summary: Get all orders
      description: (Staff Only) Retrieves a list of all customer orders.
      tags:
        - Staff
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /staff/orders/{id}:
    put:
      summary: Update order status
      description: (Staff Only) Updates the status of an order (e.g., 'Shipped', 'Delivered').
      tags:
        - Staff
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Pending, Processing, Shipped, Delivered, Canceled, Completed]
      responses:
        '200':
          description: Order status updated.

  /staff/support-tickets:
    get:
      summary: Get all support tickets
      description: (Staff Only) Retrieves all support tickets from all users.
      tags:
        - Staff
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all support tickets.

  /staff/support-tickets/{ticketId}/reply:
    post:
      summary: Reply to a support ticket
      description: (Staff Only) Adds a reply to a specific support ticket and notifies the user.
      tags:
        - Staff
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '201':
          description: Reply posted successfully.

  /admin/dashboard:
    get:
      summary: Get dashboard metrics
      description: (Admin Only) Retrieves key metrics for the admin dashboard, such as total sales, user count, and recent orders.
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A summary of dashboard metrics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardMetrics'

  /admin/categories:
    get:
      summary: Get all categories
      description: (Admin Only) Retrieves a list of all product categories.
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      description: (Admin Only) Adds a new product category to the system.
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategory'
      responses:
        '201':
          description: Category created successfully.

  /admin/categories/{id}:
    put:
      summary: Update a category
      description: (Admin Only) Updates the name or description of a category.
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/CategoryUpdate'
      responses:
        '200':
          description: Category updated successfully.
    delete:
      summary: Delete a category
      description: (Admin Only) Deletes a category. Products in this category will have their category set to null.
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully.

  /admin/users:
    get:
      summary: Get all users
      description: (Admin Only) Retrieves a list of all users in the system (customers, staff, and admins).
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /admin/users/{id}:
    put:
      summary: Update a user's role
      description: (Admin Only) Updates the role of a specific user.
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [customer, staff, admin]
      responses:
        '200':
          description: User role updated successfully.

    delete:
      summary: Delete a user
      description: (Admin Only) Permanently deletes a user from the system.
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully.

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
        - stock
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        description:
          type: string
        category_id:
          type: integer
        stock:
          type: integer
        image_url:
          type: string
          format: uri

    NewUser:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string

    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    CartItem:
      type: object
      properties:
        id:
          type: integer
          description: The unique ID of the cart item.
        user_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        name:
          type: string
          description: Product name (joined from products table).
        price:
          type: number
          description: Product price (joined from products table).
        image_url:
          type: string
          format: uri
          description: Product image URL (joined from products table).

    AddToCartRequest:
      type: object
      required: [productId, quantity]
      properties:
        productId:
          type: integer
        quantity:
          type: integer

    AddToWishlistRequest:
      type: object
      required: [productId]
      properties:
        productId:
          type: integer

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          description: The price of the product at the time of purchase.
        name:
          type: string
          description: Product name.

    Order:
      type: object
      properties:
        id:
          type: integer
        total_amount:
          type: number
        status:
          type: string
        shipping_address:
          type: string
        created_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    CreateOrderRequest:
      type: object
      required: [shippingAddress, paymentMethod, otp]
      properties:
        shippingAddress:
          type: string
          description: The full shipping address for the order.
        paymentMethod:
          type: string
          description: The chosen payment method.
          enum: [cod]
          example: cod
        otp:
          type: string
          description: The 6-digit One-Time Password sent to the user's email.

    SupportTicket:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer

    CreatePaymentSessionRequest:
      type: object
      required: [paymentMethod]
      properties:
        paymentMethod:
          type: string
          description: The online payment provider to use.
          enum: [stripe, vnpay]
          example: stripe

    SupportTicket:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        subject:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [open, in_progress, closed]
        created_at:
          type: string
          format: date-time

    NewSupportTicketRequest:
      type: object
      required: [subject, message]
      properties:
        subject:
          type: string
        message:
          type: string

    FAQItem:
      type: object
      properties:
        id:
          type: integer
        question:
          type: string
        answer:
          type: string

    DashboardMetrics:
      type: object
      properties:
        totalSales:
          type: number
        totalUsers:
          type: integer
        totalOrders:
          type: integer
        recentOrders:
          type: array
          items:
            $ref: '#/components/schemas/Order'

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string

    NewCategory:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string

  requestBodies:
    CategoryUpdate:
      description: Category object that needs to be updated.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
