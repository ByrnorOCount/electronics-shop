online-shop/
│── backend/              # Express.js backend (API, auth, DB)
│   ├── database/
│   │   ├── migrations/   # SQL migration files (schema changes, table creation, etc.)
│   │   ├── seeders/      # Data seed files (test data, default users, products, etc.)
│   │   ├── index.js
│   │   └── knexfile.js
│   ├── src/
│   │   ├── config/       # DB connection, env configs
│   │   ├── models/       # Database models (Product, User, Order)
│   │   ├── controllers/  # Request logic (products, users, orders)
│   │   ├── routes/       # Express routes (REST endpoints)
│   │   ├── middlewares/  # Auth, logging, validation
│   │   ├── services/     # Business logic (payment, email, etc.)
│   │   ├── utils/        # Helpers (formatting, error handling)
│   │   └── index.js      # Entry point (starts Express server)
│   ├── tests/            # Backend unit/integration tests
│   ├── package.json
│   └── .env              # Environment vars for backend
│
│── frontend/             # React frontend (UI)
│   ├── public/           # Static assets (logo, images, icons)
│   ├── src/
│   │   ├── components/   # Reusable UI components
│   │   ├── pages/        # Page-level views (Home, Product, Cart, Checkout)
│   │   ├── hooks/        # Custom React hooks
│   │   ├── context/      # Global state (AuthContext, CartContext)
│   │   ├── services/     # API calls to backend (fetch wrapper, axios)
│   │   ├── styles/       # CSS/Tailwind/global styles
│   │   └── main.jsx      # App entry point
│   ├── package.json
│   └── .env              # Environment vars for frontend (API URL, etc.)
│
│── .gitignore
│── package.json          # contains "workspaces": ["backend", "frontend"]
└── README.md

Workflow

Backend (Express API)
Handles users, products, orders, cart, payments.
Example routes:
/api/auth
/api/products
/api/cart
/api/orders
/api/payments

Frontend (React)
Consumes backend API.
Routes:
/ (Home)
/products/:id
/cart
/checkout
/profile

Database (PostgreSQL)

Shared Config
Keep .env separate for backend vs frontend.
Example:
Backend .env → DB credentials, JWT secret, Stripe keys.
Frontend .env → API base URL, public Stripe key.


Commands
At the root folder (with workspaces):
# Install dependencies for all workspaces
npm run install-all

For backend:
cd backend
npm run dev       # start dev server with nodemon
npm run start     # production start
npm run migrate   # run latest migrations
npm run rollback  # rollback last migration
npm run seed      # run seeds

For frontend:
cd frontend
npm run dev     # Run Vite dev server
npm run build   # Build frontend for production
npm run preview # Preview production build

For root combined dev (both frontend + backend at once):
npm run dev


Define the Schema First (The Migration)
Apply the Schema Immediately
Write Code That Obeys the Contract (Seeds, Models, etc.)

Using command line to view db (DBeaver is better as it's GUI)
psql -h localhost -p 5432 -U postgres -d electronics_shop
SELECT * FROM products;
exit: type \q and enter

Drop old tables
npx knex migrate:rollback --knexfile ./database/knexfile.js
Up new tables
npx knex migrate:latest --knexfile ./database/knexfile.js
Reseed
npx knex seed:run --knexfile ./database/knexfile.js

Migrations (migrate:latest, migrate:rollback): These commands change the structure (the schema) of your database. Running rollback will destroy the tables and all data in them. Running latest will create them again, empty. They don't clear data on their own if run repeatedly; they only apply structural changes that haven't been applied yet.
Seeds (seed:run): This command populates the database with data. Yes, in your case, it does clear the old data from the products table. This is because the very first line in your 01_initial_products.js file is await knex('products').del();. This is a common practice for development seeds to ensure you start with a clean, predictable dataset every time you run the command.

Workflow:
npx knex migrate:rollback: Destroys the tables created by the last migration.
npx knex migrate:latest: Re-creates the tables using your now-corrected migration file.
npx knex seed:run: Repopulates the fresh tables with your test data.

Adding a New Feature (The Standard Workflow)
Create a new migration file: 
npx knex migrate:make add_brand_to_products --cwd ./database
Edit the new migration file to add the column:
// In the new file: xxxx_add_brand_to_products.js
export function up(knex) {
  return knex.schema.alterTable('products', (table) => {
    table.string('brand'); // Adds the new column
  });
}

export function down(knex) {
  return knex.schema.alterTable('products', (table) => {
    table.dropColumn('brand'); // Reverts the change
  });
}
Run the migration:
npx knex migrate:latest --cwd ./database


postman/curl testing
apis for everything

focus on backend first to interact with api
then 3 weeks later match frontend with backend/database

diagrams
use case tables



làm thêm một bảng chức năng (các chức năng làm thì để bth còn để phát triển lên đồ án thì đánh màu)

tích hợp api:
	ship(giao hàng nhanh)
	payment (vnpay)
tham khảo 

admin ->CRD(products,.., dashboard (thống kê theo products, order, theo lượng user user nào mua nhiều mua ít tăng hạng cho user (premium,..))
không đề cao phải tích hợp AI

log in using facebook, gg 

table phân công công việc (process, requirment (tiến độ công việc, 

kết nối front và back để xử lý xung đột nếu có

STORE PRODUCT IMAGES IN CLOUD
Storage: AWS S3
Frontend (React): Vercel (prob this) / Netlify
Backend (Node.js): AWS Elastic Beanstalk (prob this) / Heroku / Render
Database (PostgreSQL): Amazon RDS / Heroku Postgres (prob this) / Render Postgres